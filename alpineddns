#!/bin/sh

# 脚本路径和配置文件
CONFIG_FILE="/etc/ddns_config.conf"
SCRIPT_PATH="/usr/local/bin/ddns_update.sh"
LOG_FILE="/var/log/ddns_update.log"
MANAGE_SCRIPT_PATH="/usr/local/bin/manage_ddns.sh"

# 打印菜单
print_menu() {
    clear
    echo "作者: 查尔斯"
    echo "欢迎使用 DDNS 管理脚本！"
    echo "请选择操作:"
    echo "1. 配置 DDNS"
    echo "2. 重启 DDNS 更新脚本"
    echo "3. 重新配置需要解析的域名"
    echo "4. 重新配置 Telegram 通知"
    echo "5. 卸载 DDNS"
    echo "6. 保存脚本和创建命令别名"
    echo "7. 退出脚本"
}

# 配置信息
configure_ddns() {
    echo "请输入您的 Cloudflare API token:"
    read CF_API_TOKEN

    echo "请输入您的 Cloudflare 邮箱:"
    read CF_EMAIL

    echo "请输入要解析的域名 (例如 example.com):"
    read HOSTNAME

    echo "请输入您的 Telegram 机器人 token:"
    read TELEGRAM_BOT_TOKEN

    echo "请输入您的 Telegram chat ID:"
    read TELEGRAM_CHAT_ID

    # 创建配置文件
    echo "CF_API_TOKEN=\"$CF_API_TOKEN\"" > "$CONFIG_FILE"
    echo "CF_EMAIL=\"$CF_EMAIL\"" >> "$CONFIG_FILE"
    echo "HOSTNAME=\"$HOSTNAME\"" >> "$CONFIG_FILE"
    echo "TELEGRAM_BOT_TOKEN=\"$TELEGRAM_BOT_TOKEN\"" >> "$CONFIG_FILE"
    echo "TELEGRAM_CHAT_ID=\"$TELEGRAM_CHAT_ID\"" >> "$CONFIG_FILE"

    # 创建 DDNS 更新脚本
    echo "创建 DDNS 更新脚本..."
    sudo tee $SCRIPT_PATH > /dev/null <<EOF
#!/bin/sh

# 配置部分
CF_API_TOKEN="$CF_API_TOKEN"
CF_EMAIL="$CF_EMAIL"
HOSTNAME="$HOSTNAME"
TELEGRAM_BOT_TOKEN="$TELEGRAM_BOT_TOKEN"
TELEGRAM_CHAT_ID="$TELEGRAM_CHAT_ID"

# 获取当前 IP 地址
CURRENT_IP=\$(curl -s http://ipinfo.io/ip)

# 获取 Zone ID 和 Record ID
ZONE_ID=\$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones?name=\$HOSTNAME" \
     -H "Authorization: Bearer \$CF_API_TOKEN" \
     -H "Content-Type: application/json" | jq -r '.result[0].id')

RECORD_ID=\$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones/\$ZONE_ID/dns_records?type=A&name=\$HOSTNAME" \
     -H "Authorization: Bearer \$CF_API_TOKEN" \
     -H "Content-Type: application/json" | jq -r '.result[0].id')

# 更新 DDNS
RESPONSE=\$(curl -s -X PUT "https://api.cloudflare.com/client/v4/zones/\$ZONE_ID/dns_records/\$RECORD_ID" \
     -H "Authorization: Bearer \$CF_API_TOKEN" \
     -H "Content-Type: application/json" \
     --data "{\"type\":\"A\",\"name\":\"\$HOSTNAME\",\"content\":\"\$CURRENT_IP\",\"ttl\":120}")

# 检查更新结果
if echo "\$RESPONSE" | grep -q "\"success\":true"; then
    echo "\$(date): DDNS 更新成功，IP 地址为 \$CURRENT_IP。" >> $LOG_FILE
    
    # 发送 Telegram 通知
    curl -s -X POST "https://api.telegram.org/bot\$TELEGRAM_BOT_TOKEN/sendMessage" \
         -d chat_id="\$TELEGRAM_CHAT_ID" \
         -d text="DDNS 更新成功，IP 地址为 \$CURRENT_IP，时间：\$(date)。"
else
    echo "\$(date): DDNS 更新失败: \$RESPONSE" >> $LOG_FILE

    # 发送 Telegram 通知
    curl -s -X POST "https://api.telegram.org/bot\$TELEGRAM_BOT_TOKEN/sendMessage" \
         -d chat_id="\$TELEGRAM_CHAT_ID" \
         -d text="DDNS 更新失败: \$RESPONSE，时间：\$(date)。"
fi
EOF

    # 设置脚本执行权限
    sudo chmod +x $SCRIPT_PATH

    # 设置定时任务
    echo "*/5 * * * * $SCRIPT_PATH" | (crontab -l; cat) | crontab -

    echo "DDNS 更新脚本已成功配置和启动！"
}

# 重启 DDNS 脚本
restart_ddns() {
    echo "重启 DDNS 更新脚本..."
    (crontab -l | grep -v "$SCRIPT_PATH") | crontab -
    echo "*/5 * * * * $SCRIPT_PATH" | (crontab -l; cat) | crontab -
    echo "DDNS 更新脚本已重启。"
}

# 重新配置域名
reconfigure_hostname() {
    echo "请输入新的要解析的域名 (例如 example.com):"
    read HOSTNAME

    # 更新配置文件
    sed -i "s/^HOSTNAME=.*/HOSTNAME=\"$HOSTNAME\"/" "$CONFIG_FILE"

    echo "域名已重新配置为 $HOSTNAME。"
}

# 重新配置 Telegram 通知
reconfigure_telegram() {
    echo "请输入新的 Telegram 机器人 token:"
    read TELEGRAM_BOT_TOKEN

    echo "请输入新的 Telegram chat ID:"
    read TELEGRAM_CHAT_ID

    # 更新配置文件
    sed -i "s/^TELEGRAM_BOT_TOKEN=.*/TELEGRAM_BOT_TOKEN=\"$TELEGRAM_BOT_TOKEN\"/" "$CONFIG_FILE"
    sed -i "s/^TELEGRAM_CHAT_ID=.*/TELEGRAM_CHAT_ID=\"$TELEGRAM_CHAT_ID\"/" "$CONFIG_FILE"

    echo "Telegram 通知已重新配置。"
}

# 卸载 DDNS
uninstall_ddns() {
    echo "卸载 DDNS 脚本和配置..."

    # 删除定时任务
    (crontab -l | grep -v "$SCRIPT_PATH") | crontab -

    # 删除脚本和配置文件
    sudo rm -f $SCRIPT_PATH
    sudo rm -f $CONFIG_FILE

    echo "DDNS 更新脚本和配置已被卸载。"
}

# 保存脚本和创建命令别名
save_and_alias() {
    echo "保存脚本到 GitHub..."

    # 创建脚本目录
    mkdir -p ~/ddns-management
    cp $MANAGE_SCRIPT_PATH ~/ddns-management/

    # 提示用户创建 GitHub 仓库和推送
    echo "请手动将 'manage_ddns.sh' 上传到您的 GitHub 仓库。"

    echo "创建命令别名..."
    sudo ln -sf $MANAGE_SCRIPT_PATH /usr/local/bin/ddns
    echo "命令别名已创建，您可以通过输入 'ddns' 访问脚本管理界面。"
}

# 主菜单循环
while true; do
    print_menu
    read -p "请选择选项 [1-7]: " OPTION

    case $OPTION in
        1) configure_ddns ;;
        2) restart_ddns ;;
        3) reconfigure_hostname ;;
        4) reconfigure_telegram ;;
        5) uninstall_ddns ;;
        6) save_and_alias ;;
        7) exit 0 ;;
        *) echo "无效的选项，请重新选择。" ;;
    esac
done
